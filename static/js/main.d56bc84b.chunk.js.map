{"version":3,"sources":["components/navbar/TopNav.js","components/dashboard/Main.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","className","Main","useState","apiData","setapiData","pageNumber","setpageNumber","useEffect","a","fetch","response","json","reverse","fetchRecords","maxPageNum","Math","ceil","length","handlePageBtnClick","pageNav","key","onClick","e","colName","accDetails","sort","b","console","log","handleColumnSort","slice","map","rec","id","trancType","style","color","textAlign","margin","disabled","Landing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAIe,SAASA,IACtB,OACE,yBAAKC,UAAU,UACb,sCACA,uCACA,uC,yCCJS,SAASC,IAAQ,IAAD,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,OAEOF,mBAAS,GAFhB,mBAEtBG,EAFsB,KAEVC,EAFU,KAI7BC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,gDAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEP,EAAWO,EAAKC,WAHlB,4CADc,uBAAC,WAAD,wBAOdC,KACC,IAgCD,IAAMC,EAAaC,KAAKC,KAAKb,EAAQc,OAAS,IAE1CC,EAAqB,SAACC,GACR,aAAZA,EACEd,EAAa,GACfC,EAAcD,EAAa,GAET,aAAZc,GACJd,EAAaS,GACfR,EAAcD,EAAa,IAKnC,OACE,6BACE,+BACE,+BACE,wBAAIe,IAAI,UACN,wBAAIC,QAAS,SAAAC,GAAC,OA3CxB,SAA0BA,EAAGC,GAC3B,IAAMC,EAAarB,EAEnBqB,EAAWC,MAAK,SAACjB,EAAGkB,GAAJ,OAAWlB,EAAE,eAAiBkB,EAAE,kBAChDtB,EAAWoB,GACXG,QAAQC,IAAI,uBAsCcC,KAAlB,QACA,mDACA,iDACA,+CAGA1B,EAAQ2B,MAAuB,IAAhBzB,EAAa,GAAkB,GAAXA,GAAe0B,KAAI,SAACC,EAAKC,GAC1D,IAAIC,EAMJ,OAJEA,EADCF,EAAI,eACO,wBAAIG,MAAO,CAACC,MAAM,UAAlB,MAAgCJ,EAAI,gBAEpC,wBAAIG,MAAO,CAACC,MAAM,QAAlB,MAA8BJ,EAAI,mBAG9C,wBAAIZ,IAAKa,GACP,4BAAKD,EAAG,MACR,4BAAKA,EAAI,wBACRE,EACD,4BAAKF,EAAI,sBAOrB,yBAAKhC,UAAU,kBAAkBmC,MAAO,CAACE,UAAW,QAASC,OAAO,SAClE,4BAAQC,SAAyB,IAAflC,EAAiCgB,QAAS,kBAAMH,EAAmB,cAArF,SADF,mBAEuBb,EAFvB,YAGE,4BAAQkC,SAAUlC,IAAeS,EAA2BO,QAAS,kBAAMH,EAAmB,cAA9F,Y,MCzFO,SAASsB,IACtB,OACE,yBAAKxC,UAAU,QACb,yBAAKA,UAAU,UACd,kBAACD,EAAD,OAED,yBAAKC,UAAU,gBACb,kBAACC,EAAD,QCCOwC,MAVf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.d56bc84b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Navbar.css';\n\nexport default function TopNav() {\n  return (\n    <div className=\"topnav\">\n      <div>first</div>\n      <div>second</div>\n      <div>third</div>\n    </div>\n  )\n}\n","import React, {useState, useEffect, useCallback} from 'react'\n\nimport './main.css';\n\n\nexport default function Main() {\n  const [apiData, setapiData] = useState([]);\n  const [pageNumber, setpageNumber] = useState(1);\n\n  useEffect(() => {\n    async function fetchRecords() {\n      const response = await fetch(\"https://starlord.hackerearth.com/bankAccount\");\n      const json = await response.json();\n      setapiData(json.reverse())\n      //setapiData(json.sort((a, b) => (parseDate(a.Date) > parseDate(b.Date)) ? -1 : 1))\n    }\n    fetchRecords();\n  }, [])\n\n  function parseDate(d) {\n    const months = {jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11};\n    const p = d.split(' ');\n    return new Date(p[2], months[p[1].toLowerCase()], p[0]);\n  }\n\n  function handleColumnSort(e, colName){\n    const accDetails = apiData\n    // accDetails.sort((a, b) => (parseDate(a.Date) > parseDate(b.Date)) ? true : false)\n    accDetails.sort((a, b) => (a[\"Deposit AMT\"] > b[\"Deposit AMT\"]) ? true : false)\n    setapiData(accDetails)\n    console.log('Date col is clicked')\n  }\n\n  // const handleColumnSort = useEffect(\n  //   () => {\n  //     console.log('Date col is clicked')\n  //     setapiData(apiData.sort((a, b) => (parseDate(a.Date) > parseDate(b.Date)) ? -1 : 1))\n  //   },\n  //   [apiData],\n  // )\n\n  // apiData.sort(function(a, b)  {\n  //   if (a.Date === b.Date){\n  //     return -1\n  //   }\n  //   return parseDate(a.Date) > parseDate(b.Date) ? -1 : 1\n  // })\n\n    // get the max page count for paginaiton. We need to keep the max entries per page as 10\n    const maxPageNum = Math.ceil(apiData.length / 10);\n\n    var handlePageBtnClick = (pageNav) => {\n      if (pageNav === 'prevPage'){\n        if (pageNumber > 1){\n          setpageNumber(pageNumber - 1)\n        }\n      } else if(pageNav === 'nextPage'){\n        if (pageNumber < maxPageNum){\n          setpageNumber(pageNumber + 1)\n        }\n      }\n    }\n    var newData = apiData;\n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr key=\"header\">\n            <th onClick={e => handleColumnSort(e, 'Date')}>Date</th>\n            <th>Transaction Details</th>\n            <th>Trasaction Amount</th>\n            <th>Balance Amount</th>\n          </tr>\n          {\n            apiData.slice((pageNumber - 1)*10, pageNumber*10).map((rec, id) => {\n              let trancType;\n              if(rec[\"Deposit AMT\"]){\n                trancType = <td style={{color:\"green\"}}> + {rec[\"Deposit AMT\"]}</td>\n              }else{\n                trancType = <td style={{color:\"red\"}}> - {rec[\"Withdrawal AMT\"]}</td>\n              }\n              return (\n                <tr key={id}>\n                  <td>{rec[\"Date\"]}</td>\n                  <td>{rec[\"Transaction Details\"]}</td>\n                  {trancType}\n                  <td>{rec[\"Balance AMT\"]}</td>\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </table>\n      <div className='tablePagination' style={{textAlign: \"right\", margin:\"10px\"}}>\n        <button disabled={pageNumber === 1 ? true : false} onClick={() => handlePageBtnClick('prevPage')}> Prev</button>\n        &nbsp;&nbsp; Page : {pageNumber} &nbsp;&nbsp;\n        <button disabled={pageNumber === maxPageNum ? true : false} onClick={() => handlePageBtnClick('nextPage')}> Next </button>\n      </div>\n\n    </div>\n  )\n}\n","import React from 'react';\n\nimport TopNav from './navbar/TopNav';\nimport Main from './dashboard/Main';\n\nimport './Landing.css';\n\nexport default function Landing() {\n  return (\n    <div className=\"body\">\n      <div className=\"topnav\">\n       <TopNav />\n      </div>\n      <div className=\"main-content\">\n        <Main />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport Landing from './components/Landing'\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Landing />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}